// Infix TO PREFIX

1.Reverse Infix
2.Infix to PostFix
3.REverse Answer

import java.util.Stack;

class InfixToPrefix{
  public static void main(String[] args) {
    String s = "(A+B)*C-D+F";
    // REVERSE
    StringBuilder sb = new StringBuilder(s);
    String st = sb.reverse().toString().replace('(','#').replace(')','(').replace('#',')');
    // now do infix to postfix
    String ans = InfixToPostFix(st); // reversed in function already
    // reverse ans
    System.out.println(ans);

  }
  public static String InfixToPostFix(String s)
  {
    StringBuilder sb = new StringBuilder();
    Stack<Character>st = new Stack<>();
    for (char c:s.toCharArray())
    {
      if (Character.isLetterOrDigit(c))
      {
        sb.append(c);
      }
      else if (c=='(')
      {
        st.push(c);
      }
      else if (c==')')
      {
        while(!st.isEmpty() && st.peek()!='(')
        {
          sb.append(st.pop());
        }
        if (!st.isEmpty() && st.peek()=='(')
        {
          st.pop();
        }
      }
      else
      {
        while(!st.isEmpty() && priority(c)<priority(st.peek())) // in postfix here we use <= but here only <
        {
          sb.append(st.pop());
        }
        st.push(c);
      }
    }
    while(!st.isEmpty())
    {
      sb.append(st.pop());
    }
    return sb.reverse().toString();
  }
  public static int priority(char c)
  {
    if (c=='+' || c=='-')
    {
      return 1;
    }
    else if (c=='*' || c=='/')
    {
      return 2;
    }
    else if (c=='^')
    {
      return 3;
    }
    else
    {
      return -1;
    }
    
  }
}
